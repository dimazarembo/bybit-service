package com.dzarembo.bybitservice.client;

import com.dzarembo.bybitservice.model.FundingRate;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è funding rates –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å Bybit API.
 */
@Component
public class BybitApiClient {
    private static final String BYBIT_TICKERS = "https://api.bybit.com/v5/market/tickers?category=linear";
    private static final String BYBIT_INSTRUMENTS = "https://api.bybit.com/v5/market/instruments-info?category=linear";
    private final RestTemplate rest = new RestTemplate();

    public Map<String, FundingRate> fetchFundingRates() {
        try {
            // 1Ô∏è‚É£ fundingRate –∏–∑ /tickers
            TickersResponse tickersResp = rest.getForObject(BYBIT_TICKERS, TickersResponse.class);
            if (tickersResp == null || tickersResp.result == null || tickersResp.result.list == null) {
                System.err.println("‚ö†Ô∏è tickersResp.result.list = null");
                return Collections.emptyMap();
            }

            Map<String, FundingRate> result = tickersResp.result.list.stream()
                    .collect(Collectors.toMap(
                            t -> t.symbol,
                            t -> new FundingRate(
                                    t.symbol,
                                    parseDoubleSafe(t.fundingRate),
                                    parseLongSafe(t.nextFundingTime),
                                    0
                            )
                    ));

            System.out.println("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ fundingRates: " + result.size());

            // 2Ô∏è‚É£ fundingInterval –∏–∑ /instruments-info (–≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            Map<String, Integer> fundingIntervals = fetchFundingIntervals();

            // 3Ô∏è‚É£ –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É
            result.forEach((symbol, fr) -> {
                Integer interval = fundingIntervals.get(symbol);
                fr.setFundingIntervalHours(interval != null ? interval : 0);
            });

            // 4Ô∏è‚É£ –û—Ç–ª–∞–¥–∫–∞ ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –ø–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            long zeroCount = result.values().stream().filter(f -> f.getFundingIntervalHours() == 0).count();
            System.out.println("‚ö†Ô∏è –ü–∞—Ä—ã —Å fundingInterval=0: " + zeroCount);

            return result;

        } catch (Exception e) {
            System.err.println("Bybit fetch error: " + e.getMessage());
            return Collections.emptyMap();
        }
    }

    private Map<String, Integer> fetchFundingIntervals() {
        Map<String, Integer> result = new HashMap<>();
        String cursor = null;
        int page = 1;

        try {
            do {
                String url = BYBIT_INSTRUMENTS;
                if (cursor != null) {
                    url += "&cursor=" + cursor;
                }

                System.out.println("‚û°Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É #" + page + ": " + url);
                InstrumentsResponse resp = rest.getForObject(url, InstrumentsResponse.class);

                if (resp == null) {
                    System.err.println("‚ö†Ô∏è resp == null");
                    break;
                }
                if (resp.result == null) {
                    System.err.println("‚ö†Ô∏è resp.result == null");
                    break;
                }
                if (resp.result.list == null) {
                    System.err.println("‚ö†Ô∏è resp.result.list == null");
                    break;
                }

                System.out.println("üì¶ –°—Ç—Ä–∞–Ω–∏—Ü–∞ #" + page + " —Å–æ–¥–µ—Ä–∂–∏—Ç " + resp.result.list.size() + " –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤");

                for (InstrumentItem item : resp.result.list) {
                    int minutes = item.fundingInterval != null ? item.fundingInterval : 0;
                    int hours = minutes > 0 ? minutes / 60 : 0;
                    result.put(item.symbol, hours);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫—É—Ä—Å–æ—Ä
                cursor = resp.result.nextPageCursor;
                if (cursor == null || cursor.isEmpty()) {
                    System.out.println("‚èπ –ö–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü (nextPageCursor –ø—É—Å—Ç)");
                    break;
                }

                page++;
                Thread.sleep(100); // –ª—ë–≥–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å rate-limit

            } while (true);

            System.out.println("üìä –í—Å–µ–≥–æ fundingIntervals: " + result.size());
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ fundingInterval: " + e.getMessage());
        }

        return result;
    }

    private double parseDoubleSafe(String s) {
        try {
            return s == null || s.isEmpty() ? 0.0 : Double.parseDouble(s);
        } catch (Exception e) {
            return 0.0;
        }
    }

    private long parseLongSafe(String s) {
        try {
            return s == null || s.isEmpty() ? 0L : Long.parseLong(s);
        } catch (Exception e) {
            return 0L;
        }
    }

    // DTOs –¥–ª—è /tickers
    @JsonIgnoreProperties(ignoreUnknown = true)
    private static class TickersResponse {
        public RespResult result;
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    private static class RespResult {
        public List<TickerItem> list;
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    private static class TickerItem {
        public String symbol;
        public String fundingRate;
        public String nextFundingTime;
    }

    // DTOs –¥–ª—è /instruments-info
    @JsonIgnoreProperties(ignoreUnknown = true)
    private static class InstrumentsResponse {
        public InstrumentsResult result;
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    private static class InstrumentsResult {
        public List<InstrumentItem> list;
        public String nextPageCursor;
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    private static class InstrumentItem {
        public String symbol;
        public Integer fundingInterval; // –≤ –º–∏–Ω—É—Ç–∞—Ö
    }
}
